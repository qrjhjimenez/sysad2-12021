---
# tasks file for roles/centos
#Elasticsearch
- name: Installing Java
  yum:
   name: java-11-openjdk-devel
   state: latest
   update_cache: yes

- name: Importing the ELK public GPG key into APT
  rpm_key:
   key: https://artifacts.elastic.co/GPG-KEY-elasticsearch
   state: present

- name: Adding ELK source list
  copy:
   src: needed_files/elasticsearch.repo
   dest: /etc/yum.repos.d/

- name: Install Elasticsearch
  yum:
   name: elasticsearch
   state: latest
   update_cache: yes

- name: Configuring cluster name in elasticsearch.yml
  replace:
   path: /etc/elasticsearch/elasticsearch.yml
   regexp: '#cluster.name: my-application'
   replace: 'cluster.name: my-application'

- name: Configuring node in elasticsearch.yml
  replace:
   path: /etc/elasticsearch/elasticsearch.yml
   regexp: '#node.name: node-1'
   replace: 'node.name: node-1'

- name: Configuring network host in elasticsearch.yml
  replace:
   path: /etc/elasticsearch/elasticsearch.yml
   regexp: '#network.host: 192.168.0.1'
   replace: '{{ elastic_network }}'

- name: Configuring port in elasticsearch.yml
  replace:
   path: /etc/elasticsearch/elasticsearch.yml
   regexp: '#http.port: 9200'
   replace: 'http.port: 9200'

- name: Increasing service startup timeout
  lineinfile:
   path: /etc/systemd/system/elasticsearch.service.d/startup-timeout.conf
   line: '{{ elastic_timeout }}'
   create: yes
  register: timeout

- name: Restarting systemd manager
  systemd:
   daemon_reload: yes
  when: timeout.changed

- name: Start Elasticsearch Service
  service:
   name: elasticsearch
   enabled: yes
   state: started

#Kibana
- name: Installing Dependency
  yum:
   name: nginx
   update_cache: yes

- name: Installing Kibana
  yum:
   name: kibana
   update_cache: yes

- name: Starting kibana
  systemd:
   name: kibana
   enabled: yes
   state: started

- name: Installing pip for htpasswd
  yum:
   name: python3-pip
   state: latest
   update_cache: yes

- name: Installing htpasswd module
  pip:
   name: passlib
   state: latest

- name: Creating Admin User
  htpasswd:
   path: /etc/nginx/htpasswd.users
   name: kibanaadmin
   password: '{{ kibana_pass }}'

- name: Creating Nginx Virtual Host Configuration file
  copy:
   src: needed_files/kibana_config
   dest: /etc/nginx/conf.d

- name: Restarting nginx
  service:
   name: nginx
   state: restarted

#Logstash
- name: Installing Logstash
  yum:
   name: logstash
   update_cache: yes

- name: Installing Filebeat
  yum:
   name: filebeat
   update_cache: yes

- name: Creating 1st configuration file
  copy:
   src: needed_files/02-beats-input.conf
   dest: /etc/logstash/conf.d

- name: Creating 2nd configuration file
  copy:
   src: needed_files/10-syslog-filter.conf
   dest: /etc/logstash/conf.d

- name: Creating 3rd configuration file
  copy:
   src: needed_files/30-elasticsearch-output.conf
   dest:  /etc/logstash/conf.d

- name: Starting Logstash
  service:
   name: logstash
   state: started
   enabled:

- name: Editing Filebeat Configuration output.elasticsearch
  replace:
   path: /etc/filebeat/filebeat.yml
   regexp: 'output.elasticsearch:'
   replace: '#output.elasticsearch:'

- name: Editing Filebeat Configuration hosts
  replace:
   path: /etc/filebeat/filebeat.yml
   regexp: 'hosts:'
   replace: '#hosts:'
   after: 'output.elasticsearch:'
   before: 'Protocol - either'

- name: Editing Filebeat Configuration output.logstash
  replace:
   path: /etc/filebeat/filebeat.yml
   regexp: '#output.logstash:'
   replace: 'output.logstash:'

- name: Editing Filebeat Configuration hosts
  replace:
   path: /etc/filebeat/filebeat.yml
   regexp: '#hosts:'
   replace: 'hosts:'
   after: 'output.logstash:'
   before: ' Optional SSL.'

- name: Enabling filebeat modules
  shell: 'filebeat modules enable system'

- name: Starting filebeat
  service:
   name: filebeat
   state: started
   enabled: yes

#Stop Nginx for nagios
- name: Stoping nginx service to be able to run nagios
  service:
   name: nginx
   state: stopped

#Nagios
- name: Installing required Packages
  yum:
   name:
    - httpd
    - gcc
    - glibc
    - glibc-common
    - gd-devel
    - perl
    - postfix
    - unzip
   state: latest
   update_cache: yes

- name: Start httpd
  service:
   name: httpd
   state: started

- name: Creating nagios group
  group:
   name: nagios
   state: present

- name: Creating nagios group
  group:
   name: nagcmd
   state: present

- name: Creating Nagios User
  user:
   name: nagios
   shell: /bin/bash
   comment: nagios user
   group: nagios
   password: '{{ naguser_pass }}'

- name: Add httpd to nagios group
  user:
   name: apache
   groups: nagios
   append: yes

- name: Adding nagios user group for External Command
  user:
   name: nagios
   group: nagcmd
   append: yes

- name: Adding www-data user group for External Command
  user:
   name: www-data
   group: nagcmd
   append: yes

- name: Creating downloads directory
  file:
   path: /downloads
   state: directory

- name: Downloading Nagios
  get_url:
   url: http://prdownloads.sourceforge.net/sourceforge/nagios/nagios-4.2.1.tar.gz
   dest: /downloads

- name: Extracting Nagios Core
  unarchive:
   src: /downloads/nagios-4.2.1.tar.gz
   dest: /downloads
   remote_src: yes

- name: Creating Virtual Host Directory
  file:
   path: /etc/httpd/conf.d
   state: directory

- name: Configuring Nagios Script
  shell: ./configure --with-command-group=nagcmd --with-command-group=nagcmd --with-httpd_conf=/etc/httpd/conf.d
  args:
   chdir: /downloads/nagios-4.2.1

- name: Compiling Nagios Core
  make:
   chdir: /downloads/nagios-4.2.1
   target: all

- name: Installing Binaries
  make:
   chdir: /downloads/nagios-4.2.1
   target: install

- name: Installing init script
  make:
   chdir: /downloads/nagios-4.2.1
   target: install-init

- name: Installing sample config files
  make:
   chdir: /downloads/nagios-4.2.1
   target: install-config

- name: Installing set permissions
  make:
   chdir: /downloads/nagios-4.2.1
   target: install-commandmode

- name: Installing Nagios web interface
  make:
   chdir: /downloads/nagios-4.2.1
   target: install-webconf
- name: Creating nagiosadmin account
  htpasswd:
    path: /usr/local/nagios/etc/htpasswd.users
    name: nagiosadmin
    password: '{{ nagadmin_pass }}'

- name: Restarting Apache
  service:
   name: httpd
   state: reloaded

#Stop apache for grafana
- name: Stop apache service to be able to run grafana
  service:
   name: httpd
   state: stopped

#Grafana
- name: Importing the Grafana public GPG key into APT
  rpm_key:
   key: https://packages.grafana.com/gpg.key
   state: present

- name: Adding ELK source list
  copy:
   src: needed_files/grafana.repo
   dest: /etc/yum.repos.d/

- name: Installing Grafana
  yum:
   name: grafana
   state: latest
   update_cache: yes

- name: Starting Grafana server
  service:
   name: grafana-server
   state: started
   enabled: yes

- name: a
  yum:
   name: nginx
   state: latest

- name: Configuring Nginx
  copy:
   src: needed_files/grafana_nginx
   dest: /etc/nginx/sites-available

- name: Reloading Nginx
  systemd:
   name: nginx
   state: reloaded

- name: Disabling Registration
  replace:
   path: /etc/grafana/grafana.ini
   regexp: ";allow_sign_up = true"
   replace: "allow_sign_up = false"
   after: "# disable user signup / registration"

- name: Disabling Anonymous Access
  replace:
   path: /etc/grafana/grafana.ini
   regexp: ";enabled = false"
   replace: "enabled = false"
   after: "# enable anonymous access"

- name: Restarting Grafana
  systemd:
   name: grafana-server
   state: restarted

#Prometheus
- name: Creating Directory for /etc/prometheus
  file:
   path: /etc/prometheus
   state: directory
   mode: '0755'

- name: Creating Directory for /var/lib/prometheus
  file:
   path: /var/lib/prometheus
   state: directory
   mode: '0755'

- name: Downloading Prometheus
  get_url:
   url:  https://github.com/prometheus/prometheus/releases/download/v2.0.0/prometheus-2.0.0.linux-amd64.tar.gz
   dest: /downloads

- name: Extracting prometheus file
  unarchive:
   src: /downloads/prometheus-2.0.0.linux-amd64.tar.gz
   dest: /downloads
   remote_src: True

- name: Copying Prometheus to local
  copy:
   src: /downloads/prometheus-2.0.0.linux-amd64/prometheus
   dest: /usr/local/bin/
   remote_src: True

- name: Copying Prometool to local
  copy:
   src: /downloads/prometheus-2.0.0.linux-amd64/promtool
   dest: /usr/local/bin/
   remote_src: True

- name: Executable prometheus
  file:
   path: /usr/local/bin/prometheus
   mode: u+x,g+x,o+x

- name: Executable prometool
  file:
   path: /usr/local/bin/promtool
   mode: u+x,g+x,o+x

- name: Copying consoles to /etc/prometheus directory
  shell: 'cp -r /downloads/prometheus-2.0.0.linux-amd64/consoles /etc/prometheus'

- name: Copying console library to /etc/prometheus directory
  shell: 'cp -r /downloads/prometheus-2.0.0.linux-amd64/console_libraries /etc/prometheus'

- name: Creating Prometheus configuration
  copy:
   src: needed_files/prometheus_config
   dest: /etc/prometheus/prometheus.yml

- name: Creating file for systemd service
  copy:
   src: needed_files/prometheus_service
   dest: /etc/systemd/system/prometheus.service

- name: Reloading systemd services
  systemd:
   daemon_reload: yes

- name: Starting Prometheus
  service:
   name: prometheus
   enabled: yes
   state: started

